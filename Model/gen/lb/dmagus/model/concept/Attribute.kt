package lb.dmagus.model.concept

import lb.dmagus.model.core.Family
import lb.dmagus.model.core.Node
import java.util.concurrent.atomic.AtomicReference

/**
 * The attribute.
 *
 * <p>
 * This class is generated by Gena the Crocodile.
 * Don't modify it manually.
 * </p>
 **/
public open class Attribute : ConceptElement 
{


    //// LIFE CYCLE STUFF \\\\

    val entity: Entity

    constructor(entity: Entity) : super(entity.model)
    {
        this.entity = entity
    }

    override val parentNode: Node
        get() = entity




    //// NO FAMILIES \\\\





    //// PROPERTIES \\\\


    var abstract: Boolean = false
        set (value) {
            if (field == value) return
            modifying()
            field = value
        }

    var autoincrement: Boolean = false
        set (value) {
            if (field == value) return
            modifying()
            field = value
        }




}


/**
 * The attribute family.
 *
 * <p>
 * This class is generated by Gena the Crocodile.
 * Don't modify it manually.
 * </p>
 **/
public class AttributeFamily : Family<Entity, Attribute>
{

    val entity: Entity

    override val owner: Entity
        get() = entity


    private val array: AtomicReference<Array<Attribute>> = AtomicReference(emptyArray())


    constructor(entity: Entity) : super()
    {
        this.entity = entity
    }


    public fun newAttribute(): Attribute
    {
        val attribute = Attribute(entity)
        val attributeInArray = arrayOf(attribute)

        do {
            val oldArray = array.get();
            val newArray = oldArray + attributeInArray;
            val ok =
                array.compareAndSet(oldArray, newArray)
        } while (!ok)

        return attribute
    }

}

