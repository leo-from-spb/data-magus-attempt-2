package lb.dmagus.model.PACK

import lb.dmagus.model.core.*
import java.util.concurrent.atomic.AtomicReference

public OPEN class CLASS : BASE INTERFACES
{
    // +Normal

    val PARENT_NAME: PARENT_CLASS

    constructor(PARENT_NAME: PARENT_CLASS) : super(PARENT_NAME.model)
    {
        this.PARENT_NAME = PARENT_NAME
    }

    override val parentNode: Node
        get() = PARENT_NAME

    // -Normal

    // +TopSpace

    constructor(model: Model) : super(model)

    override val parentNode: Node
        get() = model

    // -TopSpace






}


public class CLASSFamily : Family<PARENT_CLASS, CLASS>
{

    val PARENT_NAME: PARENT_CLASS

    override val owner: PARENT_CLASS
        get() = PARENT_NAME


    private val array: AtomicReference<Array<CLASS>> = AtomicReference(emptyArray())


    constructor(PARENT_NAME: PARENT_CLASS) : super()
    {
        this.PARENT_NAME = PARENT_NAME
    }




    public fun newCLASS(): CLASS
    {
        val NAME = CLASS(PARENT_NAME)
        val NAMEInArray = arrayOf(NAME)

        do {
            val oldArray = array.get();
            val newArray = oldArray + NAMEInArray;
            val ok =
                array.compareAndSet(oldArray, newArray)
        } while (!ok)

        return NAME
    }

}